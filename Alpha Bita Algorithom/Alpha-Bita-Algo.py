# -*- coding: utf-8 -*-
"""22299055_Md_Ridwanul_Basit_ass-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WU-Ymf0eiOPK73G_DrK7AVSVRhm6syZL
"""

import math
import random


# problem-1


def calculate_strength(x):
    return math.log2(x + 1) + (x / 10)

def calculate_utility(max_strength, min_strength, game_number):
    random_factor = random.randint(1, 10) / 10
    return (calculate_strength(max_strength) - calculate_strength(min_strength)) + ((-1) ** game_number) * random_factor

def minimax(depth, node_index, is_maximizing_player, alpha, beta, max_strength, min_strength, game_number):
    if depth == 5:
        return calculate_utility(max_strength, min_strength, game_number)

    if is_maximizing_player:
        best_value = -float('inf')
        for _ in range(2):
            value = minimax(depth + 1, node_index * 2 + _, False, alpha, beta, max_strength, min_strength, game_number)
            best_value = max(best_value, value)
            alpha = max(alpha, best_value)
            if beta <= alpha:
                break
        return best_value
    else:
        best_value = float('inf')
        for _ in range(2):
            value = minimax(depth + 1, node_index * 2 + _, True, alpha, beta, max_strength, min_strength, game_number)
            best_value = min(best_value, value)
            beta = min(beta, best_value)
            if beta <= alpha:
                break
        return best_value

def simulate_games(starting_player, carlsen_strength, caruana_strength):
    results = []
    for game in range(4):
        if (starting_player + game) % 2 == 0:
            max_player = "Magnus Carlsen"
            min_player = "Fabiano Caruana"
            max_strength = carlsen_strength
            min_strength = caruana_strength
        else:
            max_player = "Fabiano Caruana"
            min_player = "Magnus Carlsen"
            max_strength = caruana_strength
            min_strength = carlsen_strength

        utility_value = minimax(0, 0, True, -float('inf'), float('inf'), max_strength, min_strength, game)

        if utility_value > 0:
            winner = max_player
        elif utility_value < 0:
            winner = min_player
        else:
            winner = "Draw"

        results.append((winner, utility_value))

    return results

def main():
    starting_player = int(input("Enter starting player for game 1 (0 for Carlsen, 1 for Caruana): "))
    carlsen_strength = float(input("Enter base strength for Carlsen: "))
    caruana_strength = float(input("Enter base strength for Caruana: "))

    game_results = simulate_games(starting_player, carlsen_strength, caruana_strength)

    carlsen_wins = 0
    caruana_wins = 0
    draws = 0

    for i, (winner, utility_value) in enumerate(game_results):
        print(f"Game {i + 1} Winner: {winner} (Utility value: {utility_value:.2f})")
        if winner == "Magnus Carlsen":
            carlsen_wins += 1
        elif winner == "Fabiano Caruana":
            caruana_wins += 1
        else:
            draws += 1

    print("\nOverall Results:")
    print(f"Magnus Carlsen Wins: {carlsen_wins}")
    print(f"Fabiano Caruana Wins: {caruana_wins}")
    print(f"Draws: {draws}")

    if carlsen_wins > caruana_wins:
        print("Overall Winner: Magnus Carlsen")
    elif caruana_wins > carlsen_wins:
        print("Overall Winner: Fabiano Caruana")
    else:
        print("Overall Winner: Draw")

if __name__ == "__main__":
    main()

# problem-2


def minimax_magic(depth, node_index, is_maximizing_player, alpha, beta, max_strength, min_strength, use_magic):
    if depth == 5:
        return calculate_utility(max_strength, min_strength, 0)

    if is_maximizing_player:
        best_value = -float('inf')
        for _ in range(2):
            if use_magic:
                value = minimax_magic(depth + 1, node_index * 2 + _, False, alpha, beta, max_strength, min_strength, False)
            else:
                value = minimax_magic(depth + 1, node_index * 2 + _, False, alpha, beta, max_strength, min_strength, use_magic)
            best_value = max(best_value, value)
            alpha = max(alpha, best_value)
            if beta <= alpha:
                break
        return best_value
    else:
        best_value = float('inf')
        for _ in range(2):
            value = minimax_magic(depth + 1, node_index * 2 + _, True, alpha, beta, max_strength, min_strength, use_magic)
            best_value = min(best_value, value)
            beta = min(beta, best_value)
            if beta <= alpha:
                break
        return best_value

def main_magic():
    starting_player = int(input("Enter who goes first (0 for Light, 1 for L): "))
    magic_cost = float(input("Enter the cost of using Mind Control: "))
    light_strength = float(input("Enter base strength for Light: "))
    l_strength = float(input("Enter base strength for L: "))

    if starting_player == 0:
        max_player = "Light"
        min_player = "L"
    else:
        max_player = "L"
        min_player = "Light"

    utility_without_magic = minimax_magic(0, 0, True, -float('inf'), float('inf'), light_strength, l_strength, False)
    utility_with_magic = minimax_magic(0, 0, True, -float('inf'), float('inf'), light_strength, l_strength, True)
    utility_with_magic_cost = utility_with_magic - magic_cost

    print(f"Minimax value without Mind Control: {utility_without_magic:.2f}")
    print(f"Minimax value with Mind Control: {utility_with_magic:.2f}")
    print(f"Minimax value with Mind Control after incurring the cost: {utility_with_magic_cost:.2f}")

    if utility_without_magic > 0:
        print(f"{max_player} should NOT use Mind Control as the position is already winning.")
    elif utility_with_magic_cost > utility_without_magic:
        print(f"{max_player} should use Mind Control.")
    else:
        print(f"{max_player} should NOT use Mind Control as the position is losing either way.")

if __name__ == "__main__":
    main_magic()